{"version":3,"file":"static/js/65.1bfe85b4.chunk.js","mappings":"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","sources":["util/help.ts","pages/dashboard/dashboard.tsx"],"sourcesContent":["// export const isAdmin = () => {};\nimport { useCallback, useEffect, useRef } from \"react\";\n\n// import { convertFileAppleToImage, isNil } from '../helpers';\n\nexport type ExtractFnReturnType<FnType extends (...args: any) => any> = Awaited<\n  ReturnType<FnType>\n>;\n\ninterface RefFiles {\n  files: File[];\n  fileUrls: string[];\n}\n\nconst defaultRefFiles: RefFiles = {\n  files: [],\n  fileUrls: [],\n};\nconst isNil = (value: any) => {\n  return true;\n};\n\nasync function convertFileAppleToImage(file: File) {\n  const regexFile = /\\heic$|\\heif$/i;\n\n  const isHeicOrHeif = regexFile.test(file?.type || \"\");\n\n  if (isHeicOrHeif) {\n    try {\n      // get image as blob url\n      const blobURL = URL.createObjectURL(file);\n\n      // convert \"fetch\" the new blob url\n      const blobRes = await fetch(blobURL);\n\n      // convert response to blob\n      const blob = await blobRes.blob();\n\n      // convert to PNG - response is blob\n      const fileConvertBlob = await (\n        await import(\"heic2any\")\n      ).default({ blob });\n\n      // convert to blob url\n      return fileConvertBlob;\n    } catch (error) {\n      return null;\n    }\n  }\n  return file;\n}\n\nexport function useUploadFile() {\n  const inputRef = useRef<HTMLInputElement>(document.createElement(\"input\"));\n  const refFiles =\n    useRef<ExtractFnReturnType<IHandleUploadFile>>(defaultRefFiles);\n\n  // Initialize inputRef once on component mount\n  useEffect(() => {\n    const inputElement = inputRef.current;\n    inputElement.type = \"file\";\n    inputElement.accept = \"image/*\";\n    inputElement.hidden = true;\n\n    document.body.appendChild(inputElement);\n\n    return () => {\n      document.body.removeChild(inputElement);\n      refFiles.current.fileUrls.forEach((url) => URL.revokeObjectURL(url));\n    };\n  }, []);\n\n  const handleUploadFile: IHandleUploadFile = useCallback(\n    async (e, options) => {\n      e?.stopPropagation();\n      e?.preventDefault();\n\n      const inputElement = inputRef.current;\n\n      // Set attributes based on options provided\n      if (options) {\n        Object.entries(options).forEach(([key, value]) => {\n          if (!isNil(value)) {\n            inputElement.setAttribute(key, String(value));\n          }\n        });\n      }\n\n      // Clean up after files are loaded\n      async function handleOnChange(event: Event) {\n        const target = event.target as HTMLInputElement;\n        const { files } = target;\n\n        if (!files || files.length === 0) {\n          return;\n        }\n\n        const arrayFiles = Array.from(files);\n\n        const convertedFiles = await arrayFiles.reduce<Promise<File[]>>(\n          async (accumulatorPromise, file) => {\n            const accumulator = await accumulatorPromise;\n            const convertedFile = await convertFileAppleToImage(file);\n\n            if (convertedFile) {\n              accumulator.push(convertedFile as File);\n            }\n\n            return accumulator;\n          },\n\n          Promise.resolve<File[]>([])\n        );\n\n        const fileUrls = convertedFiles.map((file) =>\n          URL.createObjectURL(file)\n        );\n        refFiles.current = { files: convertedFiles, fileUrls };\n\n        // tips: choose same file\n        if (target) {\n          target.value = null as unknown as string;\n        }\n        inputElement.removeEventListener(\"change\", handleOnChange);\n      }\n\n      inputElement.addEventListener(\"change\", handleOnChange);\n\n      refFiles.current.fileUrls.forEach((url) => URL.revokeObjectURL(url));\n      refFiles.current = defaultRefFiles;\n\n      inputElement.click();\n\n      return new Promise<RefFiles>((resolve) => {\n        inputElement.addEventListener(\n          \"change\",\n          () => {\n            resolve(refFiles.current);\n          },\n          { once: true }\n        );\n      });\n    },\n    []\n  );\n\n  return {\n    handleUploadFile,\n    refFiles,\n  };\n}\n\ntype IHandleUploadFile = (\n  e?: Event,\n  options?: Partial<HTMLInputElement>\n) => Promise<RefFiles>;\n\nexport const useCustomFilePicker = (onFileSelected: (file: File) => void) => {\n  const inputRef = useRef<HTMLInputElement>(document.createElement(\"input\"));\n\n  useEffect(() => {\n    const inputElement = inputRef.current;\n    inputElement.type = \"file\";\n    inputElement.accept = \"image/*\";\n    inputElement.hidden = true;\n\n    document.body.appendChild(inputElement);\n\n    return () => {\n      document.body.removeChild(inputElement);\n    };\n  }, []);\n\n  const handleFileSelection = async () => {\n    await inputRef.current.click();\n  };\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      const fileList = inputRef.current?.files;\n      if (fileList && fileList.length > 0) {\n        const file = fileList[0];\n        onFileSelected(file);\n      }\n    };\n    window.addEventListener(\"change\", handleWindowResize);\n    return () => {\n      window.removeEventListener(\"change\", handleWindowResize);\n    };\n  }, []);\n\n  return {\n    handleFileSelection,\n  };\n};\n","import React from \"react\";\nimport { useLoaderData } from \"react-router-dom\";\nimport { useCustomFilePicker, useUploadFile } from \"../../util/help\";\n\ntype Props = {};\n\nconst Dashboard = (props: Props) => {\n  try {\n    const loaderData = useLoaderData();\n    console.log(\"loaderData\", loaderData);\n  } catch (err) {\n    console.log(err);\n  }\n  const handleFileSelected = (file: File) => {\n    // Xử lý file đã chọn ở đây\n    console.log(\"File đã chọn:\", file);\n  };\n\n  const { handleFileSelection } = useCustomFilePicker(handleFileSelected);\n\n  const { handleUploadFile } = useUploadFile();\n\n  const HandleUpdateLoad = async () => {\n    const { files } = await handleUploadFile();\n    console.log(\"arr\", files);\n  };\n\n  return (\n    <div>\n      <button onClick={handleFileSelection}>Chọn ảnh</button>\n      <button onClick={HandleUpdateLoad}>UploadFile</button>\\\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"names":["defaultRefFiles","files","fileUrls","useUploadFile","inputRef","useRef","document","createElement","refFiles","useEffect","inputElement","current","type","accept","hidden","body","appendChild","removeChild","forEach","url","URL","revokeObjectURL","handleUploadFile","useCallback","async","e","options","stopPropagation","preventDefault","Object","entries","_ref","key","value","addEventListener","handleOnChange","event","target","length","arrayFiles","Array","from","convertedFiles","reduce","accumulatorPromise","file","accumulator","convertedFile","test","blobURL","createObjectURL","blobRes","fetch","blob","default","error","convertFileAppleToImage","push","Promise","resolve","map","removeEventListener","click","once","props","loaderData","useLoaderData","console","log","err","handleFileSelection","onFileSelected","handleWindowResize","_inputRef$current","fileList","window","useCustomFilePicker","_jsxs","children","_jsx","onClick"],"sourceRoot":""}